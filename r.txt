//Lp
require(lpSolve)
library(lpSolve)
o=c(3,2)
c=matrix(c(2,1,1,1), nrow = 2, byrow = T)
d=rep('<=',2)
r=c(100,80)
sol=lpSolve::lp('max',o,c,d,r,compute.sens = T)
sol$solution
print(sol)

//transport
require(lpSolve)
library(lpSolve)
x=matrix(c(10,13,8,15,12,16,11,17,9), nrow = 3, ncol = 3, byrow = T)
r = c(100,200,300)
c = c(150,250,200)
rs=rep('=',3)
cs=rep('=',3)
sol=lp.transport(x,direction = 'min',rs,r,cs,c)
sol$solution
print(sol)

//Assign
require(lpSolve)
library(lpSolve)
x=matrix(c(2,7,7,5,7,9,5,9,7,3,8,8,5,6,10,7), nrow = 4, ncol = 4, byrow = T)
sol=lp.assign(x,direction = 'min')
sol$solution
print(sol)


//Simplex
require(lpSolve)
library(lpSolve)
require(optimsimplex)
library(optimsimplex)
library(boot)

o=c(200,150,150)
c=matrix(c(10,3,10,5,5,5), nrow = 2, ncol = 3, byrow = T)
r=c(100,60)
simplex(a=o,A1=c,b1=r,maxi = T)


//regression
x <- c(5.1,5.5,5.8,6.1,6.4,65.7,6.4,6.1,5.10,5.7)
y <- c(63,66,69,72,75,78,75,72,69,66)

relation <- lm(y~x)
summary(relation)
a <- data.frame(x=6.3)
result <- predict(relation,a)
print(result)

Predict the weight of new persons
 Live Demo
# The predictor vector.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)

# The resposne vector.
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)

# Apply the lm() function.
relation <- lm(y~x)

# Find weight of a person with height 170.
a <- data.frame(x = 170)
result <-  predict(relation,a)
print(result)

 Visualize the Regression Graphically
 Live Demo
# Create the predictor and response variable.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)

# Give the chart file a name.
png(file = "linearregression.png")

# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")

# Save the file.
dev.off()

//Graph feasible solution
cons.1 <- function(x) 6 - x  
cons.2 <- function(x) 5 - 0.5*x
# Import ggplot2 package
library(ggplot2)

# Build plot
p <- ggplot(data = data.frame(x = 0), aes(x = x)) +
  
  # Add axes
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  
  # Add constraints lines
  stat_function(colour = "Red", fun = cons.1) +
  stat_function(colour = "Blue", fun = cons.2) +
  geom_vline(xintercept = 4, colour = "Green") +
  
  # Specify axes breaks and limits
  scale_x_continuous(breaks = seq(0, 10, 1), lim = c(0, 10)) +
  scale_y_continuous(breaks = seq(0, 10, 1), lim = c(0, 10)) +
  
  # Define labels
  labs(title = "Optimization Problem",
       subtitle = "Graphical Method",
       x = "x1",
       y = "x2") +
  
  # Add black and white theme
  theme_bw()

# Print plot
print(p)

feasible_region = data.frame(x = c(0, 4, 4, 2, 0), y = c(0, 0, 2, 4, 5))

# Add feasible region to current plot
p <- p + geom_polygon(data = feasible_region, mapping = aes(x = x, y = y), fill = "#dddddd") +
  geom_point(data = feasible_region, aes(x = x, y = y), color = "Black")

# Print plot
print(p)


//read from file transport and assign

b=read.delim(file.choose(),header = T,sep = ',')
s1=b$s1
s2=b$s2
s3=b$s3
s=b$supply
d=b$demand

a=c()
for(i in 1:3)
{
  a=append(a,s1[i])
  a=append(a,s2[i])
  a=append(a,s3[i])
}

a=matrix(a,nrow = 3,ncol = 3,byrow = T)

require(lpSolve)
library(lpSolve)
ss=rep('=',3)
ds=rep('=',3)
sol=lp.transport(a,direction = 'min',ss,s,ds,d)
sol$solution
print(sol)

write.csv(sol$solution,file = "output.csv")

//Anova
# Installing the package
install.packages("dplyr")

# Loading the package
library(dplyr)

# Variance in mean within group and between group
boxplot(mtcars$disp~factor(mtcars$gear),
		xlab = "gear", ylab = "disp")

# Step 1: Setup Null Hypothesis and Alternate Hypothesis
# H0 = mu = mu01 = mu02(There is no difference
# between average displacement for different gear)
# H1 = Not all means are equal

# Step 2: Calculate test statistics using aov function
mtcars_aov <- aov(mtcars$disp~factor(mtcars$gear))
summary(mtcars_aov)

# Step 3: Calculate F-Critical Value
# For 0.05 Significant value, critical value = alpha = 0.05

# Step 4: Compare test statistics with F-Critical value
# and conclude test p < alpha, Reject Null Hypothesis

